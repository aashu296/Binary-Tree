
-----------------------BINARY TREE CLASS----------------
template<typename T>

class BinaryTreeNode {
    public: 
    T data;
    BinaryTreeNode* left;
    BinaryTreeNode* right;
    BinaryTreeNode (T data) {
        this -> data = data;
        right=NULL;
        left=NULL;
    }
    ~binaryTreeNode() {
        if(root==NULL) {
            return;
        }
        delete left;
        delete right;
    }
};




-------------MAIN FUNCTION---------------------------

#include<iostream>
#include"BinaryTreeNode.h"

using namespace std;
void printTree(BinaryTreeNode<int>* root) {
    if(root==NULL) {
        return;
    }
    cout<<root->data<<endl;
    if(root->left!=NULL) {
        cout<<"L"<<root->left->data;
    }
    if(root->right!=NULL) {
        cout<<"R"<<root->right->data;
    }
    cout<<endl;
    printTree(right->left);
    printTree(right->right);
}


BinaryTreeNode<int>* takeInput() {
    int rootData;
    cout<<"Enter a data"<<endl;
    cin>>rootData;
    if(root->data==-1) {
        return;
    }
    BinaryTreeNode<int>*root = new TreeNode<int>(rootData);
    BinaryTreeNode<int>*left = takeInput();
    BinaryTreeNode<int>* right = takeInput();
    root->left->data = node1;
    root->right->data = node2;
    return root;
}

BinaryTreeNode<int>* takeInputLevelWise() {
    int rootData;
    cout<<"Enter root data"<<endl;
    cin>>rootData;
    if(rootData == -1) {
        return NULL;
    }
    BinaryTreeNode<int>*root = new BinaryTreeNode<int>(rootData);
    queue<BinaryTreeNode<int>*>pendingNodes;
    pendingNodes.push(root);
    while(pendingNode.size() != 0) {
        BinaryTreeNode<int>*front = pendingNodes.front();
        pendingNodes.pop();
        cout<<"Enter left child of"<<front->data<<endl;
        int leftChildData;
        cin>>leftChildData;
        if(leftChildData != -1){
            BinaryTreeNode<int>* child = new BinaryTreeNode<int>(leftChildData);
            front->left =child;
            pendingNodes.push(child);
        }
        cout<<"Enter right child of" <<front->data<<endl;
        int rightChildData;
        cin>>rightChildData;
        while(rightChildData != -1) {
        BinaryTreeNode<int>* child = new BinaryTreeNode<int>(rightChildData);
        front->right = child
        pendingNodes.push(child);
        }
    }
    return root;
}

int numNodes(BinaryTreeNode<int>* root) {
    if(root==NULL) {
        return 0;
    }
    return 1 + numNodes(root->left) + numNodes(root->right);
    
}

void inOrder(BinaryTreeNodes<int>* root) {
    if(root==NULL) {
        return;
    }
    inorder(root->left);
    cout<<root->data<<" ";
    //inOrder(root->data);
    inOrder(root->right);
}

void preOrder(BinaryTreeNode<int>* root) {
    if(root == NULL) {
        return;
    }
    cout<<root->data<<" ";
    //preOrder(root->data);
    //cout<<root->data<<" ";
    preOrder(root->left);
    preOrder(root->right);

}

binaryTreeNode<int>* buildTree2(int* in, int* post, int size) {
    return buildTreeHelper2(in, post, 0, size-1, 0, size-1);
} 
BinaryTreeNodE<int>* buildTreeHelper2(int* in, int* post , inS, inE, postS, postE) {
    if(inS>inE) {
        return NULL;
    }
    int rootData = postE;
    int rootIndex=-1;
    for(int i = inS; i<inE; i++) {
        if(in[i] == rootData) {
            rootIndex=i;
            break;
        }
    }
    int lInS = inS ;
    int lInE = rootIndex-1;
    int lPostS = postS;
    int lPostE = lInE-lInS+lPostS;
    int rInS = roootIndex+1;
    int rInE = inE;
    int rPostS = lPostE+1;
    int rPostE = postE;
    BinaryTreeNode<int>* root = new BinaryTreeNode<int>(rootData);
    root->left = buildTreeHelper2(in, post, lInS, lInE, lPostS, lPostE);
    root->right= buildTreeHelper2(in, post, rInE, rInE, rPostS, rPostE); 
    return root;
}


BinaryTreeNode<int>* buildTree(int *in, int *pre, int size) {
    return(buildTreeHelper(in, pre, 0, size-1, 0, size-1));
}


BinaryTreeNode<int>* buildTreeHelper(int* in, int* pre, int inS, int inE, int preS, int preE) {
    if(inS>inE) {
        return NULL;
    }
    int rootdata = pre[preS];
    int rootIndex = -1;
    for(int i = inS; i<inE; i++) {
        if(in[i] == rootData) {
            rootIndex=i;
            break;
        }
    }
    int lPreS = preS + 1;
    int lPreE = lInE - lInS + lPreS;
    int lInS = inS;;
    int lInE = rootIndex-1;
    int rInS = rootIndex+1;
    int rInE = inE;
    int rPreS= lPreE + 1;
    int rPreE = preE;
    binaryTreeNode<int>* root = new BinaryTreeNode<int>(rootData);
    root->left = buildTreeHelper(in, pre, lInS, lInE, lPreE);
    root->right= buildTreeHelper(in, pre, rInS, rPreS, rPreE);
    return root;
    
}

int height(BinaryTreeNode<int>* root) {
    if(root == NULL) {
        return 0;
    }
    return (1+max(height(root->left),height(root->right)));
}

int diameter(BinaryTreeNode<int>*root) {
    if(root== NULL) {
        return 0;
    }
    int option1 =height(root->left)+ height(root->right);
    int option2 = diameter(root->left);
    int option3= diameter(root->right);
    return (max(option1,max(option2,option3)));
}

pair<int,int> heightDiameter(BinaryTreeNode<int>* root) {
    if(root==NULL) {
        pair<int,int>p;
        p.first=0;
        p.second=0;
        return p;
    }
    pair<int,int> leftAns = heightDiameter(root->left);
    pair<int,int> rightAns = heightDiameter(root-> right);
    int ld= leftans.second;
    int lh = leftAns.first;
    int rd = rightAns.second;
    int rh = rightAns.first;
    int height =  1 + max(lh,rh);
    int diameter = max(lh+rh, max(ld,rd));
    pair<int,int> p;
    p.first = height;
    p.second = diameter;
    return p;
}

















int main() {
    /*
    BinaryTreeNode<int>* root = new BinaryTreeNode<int>(2);
    BinaryTreeNode<int>* node1 = new BinaryTreeNode<int>(5);
    BinaryTreeNOde<int>* node2 = new BinaryTreeNode<int>(6);
    root->left = node1;
    root -> right = node2;
    */
    //int in[] = {4,2,5,1,8,6,9,3,7};
    //int pre[] = {1,2,4,5,3,6,8,9,7};
    //int post[] = {4,5,2,8,9,6,7,3,1};
    //BinaryTreeNode<int>*root = buildTree2(in, post, 9);
    //BinaryTreeNode<int>*root= buildTree(in, pre, 9):
    //BinaryTreeNode<int>* root = takeInputBetter();
    BinaryTreeNode<int>*root= takeInputLevelWise();
    printTree(root);
    cout<<"num:"<<numNodes(root)<<endl;
    inorder(root);
    cout<<endl;
    pair<int,int>p = heightDiameter(root);
    cout<<"Height:"<<p.first<<endl;
    cout<<"Diameter:"<<p.second<<endl;
    delete root;
}
